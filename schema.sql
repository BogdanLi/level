DROP TABLE IF EXISTS PUBLIC .briefs;

DROP TABLE IF EXISTS PUBLIC .progress;

DROP TABLE IF EXISTS PUBLIC .verses;

DROP TABLE IF EXISTS PUBLIC .chapters;

DROP TABLE IF EXISTS PUBLIC .books;

DROP TABLE IF EXISTS PUBLIC .steps;

DROP TABLE IF EXISTS PUBLIC .project_translators;

DROP TABLE IF EXISTS PUBLIC .project_coordinators;

DROP TABLE IF EXISTS PUBLIC .projects;

DROP TABLE IF EXISTS PUBLIC .methods;

DROP TABLE IF EXISTS PUBLIC .users;

DROP TABLE IF EXISTS PUBLIC .role_permissions;

DROP TABLE IF EXISTS PUBLIC .languages;

DROP FUNCTION IF EXISTS PUBLIC .authorize;

DROP FUNCTION IF EXISTS PUBLIC .has_access;

DROP FUNCTION IF EXISTS PUBLIC .can_change_role;

DROP TYPE IF EXISTS PUBLIC .app_permission;

DROP TYPE IF EXISTS PUBLIC .project_role;

DROP TYPE IF EXISTS PUBLIC .project_type;

DROP TYPE IF EXISTS PUBLIC .book_code;

-- Custom types
CREATE TYPE PUBLIC .app_permission AS enum (
  'dictionaries',
  'notes',
  'projects',
  'verses.set',
  'moderator.set',
  'user_projects',
  'project_source',
  'coordinator.set',
  'languages',
  'user_languages',
  'translator.set'
);

CREATE TYPE PUBLIC .project_role AS enum ('coordinator', 'moderator', 'translator');

CREATE TYPE PUBLIC .project_type AS enum ('obs', 'bible');

CREATE TYPE PUBLIC .book_code AS enum (
  'gen',
  'exo',
  'lev',
  'num',
  'deu',
  'jos',
  'jdg',
  'rut',
  '1sa',
  '2sa',
  '1ki',
  '2ki',
  '1ch',
  '2ch',
  'ezr',
  'neh',
  'est',
  'job',
  'psa',
  'pro',
  'ecc',
  'sng',
  'isa',
  'jer',
  'lam',
  'ezk',
  'dan',
  'hos',
  'jol',
  'amo',
  'oba',
  'jon',
  'mic',
  'nam',
  'hab',
  'zep',
  'hag',
  'zec',
  'mal',
  'mat',
  'mrk',
  'luk',
  'jhn',
  'act',
  'rom',
  '1co',
  '2co',
  'gal',
  'eph',
  'php',
  'col',
  '1th',
  '2th',
  '1ti',
  '2ti',
  'tit',
  'phm',
  'heb',
  'jas',
  '1pe',
  '2pe',
  '1jn',
  '2jn',
  '3jn',
  'jud',
  'rev',
  'obs'
);

-- USERS
CREATE TABLE PUBLIC .users (
  id uuid NOT NULL primary key,
  email text NOT NULL UNIQUE,
  login text NOT NULL UNIQUE,
  agreement BOOLEAN NOT NULL DEFAULT FALSE,
  confession BOOLEAN NOT NULL DEFAULT FALSE,
  is_admin BOOLEAN NOT NULL DEFAULT FALSE,
  blocked TIMESTAMP DEFAULT NULL
);

-- ROLE PERMISSIONS
CREATE TABLE PUBLIC .role_permissions (
  id bigint generated BY DEFAULT AS identity primary key,
  role project_role NOT NULL,
  permission app_permission NOT NULL,
  UNIQUE (role, permission)
);

COMMENT ON TABLE PUBLIC .role_permissions IS 'Application permissions for each role.';

-- LANGUAGES
CREATE TABLE PUBLIC .languages (
  id bigint generated BY DEFAULT AS identity primary key,
  eng text NOT NULL,
  code text NOT NULL UNIQUE,
  orig_name text NOT NULL,
  is_gl BOOLEAN NOT NULL DEFAULT FALSE
);

-- METHODS
CREATE TABLE PUBLIC .methods (
  id bigint generated BY DEFAULT AS identity primary key,
  title text NOT NULL,
  steps json,
  resources json,
  "type" project_type NOT NULL DEFAULT 'bible'::project_type
);

-- PROJECTS
CREATE TABLE PUBLIC .projects (
  id bigint generated BY DEFAULT AS identity primary key,
  title text NOT NULL,
  code text NOT NULL,
  language_id bigint references PUBLIC .languages ON
  DELETE
    CASCADE NOT NULL,
  "type" project_type NOT NULL,
  resources json,
  method text NOT NULL,
  base_manifest json,
  UNIQUE (code, language_id)
);

COMMENT ON COLUMN public.projects.type
    IS 'копируется с таблицы методов';

COMMENT ON COLUMN public.projects.resources
    IS 'копируем с таблицы методов, должны быть запонены ссылки, указываем овнера, репо, коммит';

COMMENT ON COLUMN public.projects.method
    IS 'копируем без изменений название метода с таблицы шаблонов';

-- PROJECT TRANSLATORS
CREATE TABLE PUBLIC .project_translators (
  id bigint generated BY DEFAULT AS identity primary key,
  project_id bigint references PUBLIC .projects ON
  DELETE
    CASCADE NOT NULL,
  is_moderator boolean DEFAULT false,
  user_id uuid references PUBLIC .users ON
  DELETE
    CASCADE NOT NULL,
  UNIQUE (project_id, user_id)
);

-- PROJECT COORDINATORS
CREATE TABLE PUBLIC .project_coordinators (
  id bigint generated BY DEFAULT AS identity primary key,
  project_id bigint references PUBLIC .projects ON
  DELETE
    CASCADE NOT NULL,
  user_id uuid references PUBLIC .users ON
  DELETE
    CASCADE NOT NULL,
  UNIQUE (project_id, user_id)
);

-- BRIEFS
CREATE TABLE PUBLIC .briefs (
  id bigint generated BY DEFAULT AS identity primary key,
  project_id bigint references PUBLIC .projects ON
  DELETE
    CASCADE NOT NULL UNIQUE,
  "text" text DEFAULT NULL
);

COMMENT ON COLUMN public.briefs.text
    IS 'бриф пишем в формате маркдаун';

-- STEPS
CREATE TABLE PUBLIC .steps (
  id bigint generated BY DEFAULT AS identity primary key,
  title text NOT NULL,
  "description" text DEFAULT NULL,
  intro text DEFAULT NULL,
  count_of_users int2 NOT NULL,
  "time" int2 NOT NULL,
  project_id bigint REFERENCES PUBLIC .projects ON
  DELETE
    CASCADE NOT NULL,
  config json NOT NULL,
  order_by int2 NOT NULL,
    UNIQUE (project_id, order_by)
);

COMMENT ON COLUMN public.steps.order_by
    IS 'это поле юзер не редактирует. Мы его указываем сами.';

-- BOOKS
CREATE TABLE PUBLIC .books (
  id bigint generated BY DEFAULT AS identity primary key,
  code book_code NOT NULL,
  project_id bigint references PUBLIC .projects ON
  DELETE
    CASCADE NOT NULL,
  "text" text DEFAULT NULL,
  chapters json,
  UNIQUE (project_id, code)
);

COMMENT ON TABLE public.books
    IS 'У каждой книги потом прописать ее вес. Рассчитать на основе англ или русских ресурсов (сколько там слов). Подумать о том, что будет если удалить проект. Так как в таблице книги мы хотим хранить текст. Отобразим 66 книг Библии или 1 ОБС. В будущем парсить манифест чтобы отображать книги которые уже готовы. Или в момент когда админ нажмет "Создать книгу" проверить есть ли они, если нет то выдать предупреждение.';

COMMENT ON COLUMN public.books.text
    IS 'Здесь мы будем собирать книгу чтобы не делать много запросов. Возьмем все главы и объединим. Так же тут со временем пропишем вес книги на основе англ или русского ресурса';


-- CHAPTERS
CREATE TABLE PUBLIC .chapters (
  id bigint generated BY DEFAULT AS identity primary key,
  num int2 NOT NULL,
  book_id bigint REFERENCES PUBLIC .books ON
  DELETE
    CASCADE NOT NULL,
  "text" text DEFAULT NULL,
  verses integer,
    UNIQUE (book_id, num)
);

-- VERSES
CREATE TABLE PUBLIC .verses (
  id bigint generated BY DEFAULT AS identity primary key,
  num int2 NOT NULL,
  "text" text DEFAULT NULL,
  current_step bigint REFERENCES PUBLIC .steps ON
  DELETE
    CASCADE NOT NULL,
  chapter_id bigint REFERENCES PUBLIC .chapters ON
  DELETE
    CASCADE NOT NULL,
  project_translator_id bigint REFERENCES PUBLIC .project_translators ON
  DELETE
    CASCADE NOT NULL,
    UNIQUE (chapter_id, num)
);

COMMENT ON COLUMN public.verses.text
    IS 'тут будет храниться последний текст. Когда мы переходим на следующий шаг, мы копируем текст и номер предыдущего шага';

COMMENT ON COLUMN public.verses.current_step
    IS 'Скорее всего тут придется хранить айдишник шага. Так как несколько переводчиков то часть стихов может быть на одном а часть на другом шаге. Переводчик у нас на уровне проекта а не главы, чтобы можно было у переводчика хранить, на каком он шаге.';

-- PROGRESS
CREATE TABLE PUBLIC .progress (
  id bigint generated BY DEFAULT AS identity primary key,
  verse_id bigint REFERENCES PUBLIC .verses ON
  DELETE
    CASCADE NOT NULL,
  step_id bigint REFERENCES PUBLIC .steps ON
  DELETE
    CASCADE NOT NULL,
  "text" text DEFAULT NULL,
    UNIQUE (verse_id, step_id)
);

-- authorize with role-based access control (RBAC)
-- Вообще не актуальная штука, и не работает. Надо переписать
CREATE
OR replace FUNCTION PUBLIC .authorize(
  requested_permission app_permission,
  user_id uuid
) returns BOOLEAN LANGUAGE plpgsql security definer AS $$
DECLARE
  bind_permissions INT;

BEGIN
  SELECT
    COUNT(*)
  FROM
    PUBLIC .role_permissions
    INNER JOIN PUBLIC .project_coordinators ON role_permissions.role = project_coordinators.role
  WHERE
    role_permissions.permission = authorize.requested_permission
    AND project_coordinators.user_id = authorize.user_id INTO bind_permissions;

RETURN bind_permissions > 0;

END;

$$;

-- if user can work with site
CREATE
OR replace FUNCTION PUBLIC .has_access(user_id uuid) returns BOOLEAN LANGUAGE plpgsql security definer AS $$
DECLARE
  access INT;

BEGIN
  SELECT
    COUNT(*)
  FROM
    PUBLIC .users
  WHERE
    users.id = has_access.user_id
    AND users.agreement = TRUE
    AND users.confession = TRUE INTO access;

RETURN access > 0;

END;

$$;

-- Редактировать привилегии может координатор и администратор.
-- Координатор может поменять роль на переводчика или модератора.
-- Админ может на координатора, переводчика или модератора.
CREATE
OR replace FUNCTION PUBLIC .can_change_role(role project_role, from_user uuid, to_user uuid) returns BOOLEAN LANGUAGE plpgsql security definer AS $$
DECLARE
  from_user_role project_role;

to_user_role project_role;

BEGIN
  SELECT
    project_roles.role
  FROM
    project_roles
  WHERE
    project_roles.user_id = can_change_role.from_user INTO from_user_role;

SELECT
  project_roles.role
FROM
  project_roles
WHERE
  project_roles.user_id = can_change_role.to_user INTO to_user_role;

IF can_change_role.role = 'moderator'
AND from_user_role = 'coordinator'
AND to_user_role = 'translator' THEN RETURN TRUE;

END IF;

IF can_change_role.role = 'translator'
AND from_user_role = 'coordinator'
AND to_user_role = 'moderator' THEN RETURN TRUE;

END IF;

RETURN FALSE;

END;

$$;

-- Secure the tables
-- Secure users
ALTER TABLE
  PUBLIC .users enable ROW LEVEL security;

DROP POLICY IF EXISTS "Залогиненый юзер может получить список всех юзеров" ON PUBLIC .users;

CREATE policy "Залогиненый юзер может получить список всех юзеров" ON PUBLIC .users FOR
SELECT
  TO authenticated USING (TRUE);

DROP POLICY IF EXISTS "Создавать может только записи про себя" ON PUBLIC .users;

CREATE policy "Создавать может только записи про себя" ON PUBLIC .users FOR
INSERT
  WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Обновлять может только самого себя" ON PUBLIC .users;

CREATE policy "Обновлять может только самого себя" ON PUBLIC .users FOR
UPDATE
  USING (auth.uid() = id);

-- Secure languages
ALTER TABLE
  PUBLIC .languages enable ROW LEVEL security;

DROP POLICY IF EXISTS "Залогиненый юзер может получить список всех языков" ON PUBLIC .languages;

CREATE policy "Залогиненый юзер может получить список всех языков" ON PUBLIC .languages FOR
SELECT
  TO authenticated USING (TRUE);

DROP POLICY IF EXISTS "Создавать может только тот, у кого есть привилегия" ON PUBLIC .languages;

CREATE policy "Создавать может только тот, у кого есть привилегия" ON PUBLIC .languages FOR
INSERT
  WITH CHECK (authorize('languages', auth.uid()));

DROP POLICY IF EXISTS "Обновлять может только тот, у кого есть привилегия" ON PUBLIC .languages;

CREATE policy "Обновлять может только тот, у кого есть привилегия" ON PUBLIC .languages FOR
UPDATE
  USING (authorize('languages', auth.uid()));

DROP POLICY IF EXISTS "Удалять может только тот, у кого есть привилегия" ON PUBLIC .languages;

CREATE policy "Удалять может только тот, у кого есть привилегия" ON PUBLIC .languages FOR
DELETE
  USING (authorize('languages', auth.uid()));

-- Secure project_translators
ALTER TABLE
  PUBLIC .project_translators enable ROW LEVEL security;

DROP POLICY IF EXISTS "Залогиненый юзер может получить список всех ролей любого пользователя" ON PUBLIC .project_translators;

CREATE policy "Залогиненый юзер может получить список всех ролей любого пользователя" ON PUBLIC .project_translators FOR
SELECT
  TO authenticated USING (TRUE);

DROP POLICY IF EXISTS "Редактировать привилегии может координатор и администратор. Координатор может поменять роль на переводчика или модератора. Админ может на координатора, переводчика или модератора." ON PUBLIC .project_translators;

-- CREATE policy "Редактировать привилегии может координатор и администратор. Координатор может поменять роль на переводчика или модератора. Админ может на координатора, переводчика или модератора." ON PUBLIC .project_translators FOR
-- UPDATE
--   USING (can_change_role(role, auth.uid(), user_id));
-- Secure role_permissions
ALTER TABLE
  PUBLIC .role_permissions enable ROW LEVEL security;

-- Send "previous data" on change
ALTER TABLE
  PUBLIC .users replica identity full;

ALTER TABLE
  PUBLIC .languages replica identity full;

-- create policy "политика с джойном"
--   on teams
--   for update using (
--     auth.uid() in (
--       select user_id from members
--       where team_id = id
--     )
--   );
-- inserts a row into public.users
CREATE
OR replace FUNCTION PUBLIC .handle_new_user() returns TRIGGER LANGUAGE plpgsql security definer AS $$ BEGIN
  INSERT INTO
    PUBLIC .users (id, email, login)
  VALUES
    (NEW .id, NEW .email, NEW .raw_user_meta_data ->> 'login');

RETURN NEW;

END;

$$;

-- trigger the function every time a user is created
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

CREATE TRIGGER on_auth_user_created after
INSERT
  ON auth.users FOR each ROW EXECUTE FUNCTION PUBLIC .handle_new_user();

-- inserts a row into public.briefs
CREATE
OR replace FUNCTION PUBLIC .handle_new_project() returns TRIGGER LANGUAGE plpgsql security definer AS $$ BEGIN
  INSERT INTO
    PUBLIC .briefs (project_id)
  VALUES
    (NEW .id);

RETURN NEW;

END;

$$;

-- trigger the function every time a project is created
DROP TRIGGER IF EXISTS on_public_project_created ON PUBLIC .projects;

CREATE TRIGGER on_public_project_created after
INSERT
  ON PUBLIC .projects FOR each ROW EXECUTE FUNCTION PUBLIC .handle_new_project();

/**
 * REALTIME SUBSCRIPTIONS
 * Only allow realtime listening on public tables.
 */
BEGIN
;

-- remove the realtime publication
DROP publication IF EXISTS supabase_realtime;

-- re-create the publication but don't enable it for any tables
CREATE publication supabase_realtime;

COMMIT;

-- add tables to the publication
ALTER publication supabase_realtime
ADD
  TABLE PUBLIC .languages;

ALTER publication supabase_realtime
ADD
  TABLE PUBLIC .users;

-- DUMMY DATA
DELETE FROM
  PUBLIC .users;

INSERT INTO
  PUBLIC .users (
    id,
    login,
    email,
    agreement,
    confession,
    blocked,
    is_admin
  )
VALUES
  (
    '21ae6e79-3f1d-4b87-bcb1-90256f63c167',
    'Translator',
    'translator@mail.com',
    FALSE,
    FALSE,
    NULL,
    FALSE
  ),
  (
    '2b95a8e9-2ee1-41ef-84ec-2403dd87c9f2',
    'Coordinator2',
    'coordinator2@mail.com',
    FALSE,
    FALSE,
    NULL,
    FALSE
  ),
  (
    '2e108465-9c20-46cd-9e43-933730229762',
    'Moderator3',
    'moderator3@mail.com',
    FALSE,
    FALSE,
    NULL,
    FALSE
  ),
  (
    '54358d8e-0144-47fc-a290-a6882023a3d6',
    'Coordinator3',
    'coordinator3@mail.com',
    FALSE,
    FALSE,
    NULL,
    FALSE
  ),
  (
    '83282f7a-c4b7-4387-97c9-4c356e56af5c',
    'Coordinator',
    'coordinator@mail.com',
    FALSE,
    FALSE,
    NULL,
    FALSE
  ),
  (
    '8331e952-5771-49a6-a679-c44736f5581b',
    'Moderator2',
    'moderator2@mail.com',
    FALSE,
    FALSE,
    NULL,
    FALSE
  ),
  (
    'ae891f6d-0f04-4b01-aa15-1ed46d0ef91d',
    'Admin2',
    'admin2@mail.com',
    FALSE,
    FALSE,
    NULL,
    TRUE
  ),
  (
    'bba5a95e-33b7-431d-8c43-aedc517a1aa6',
    'Translator2',
    'translator2@mail.com',
    FALSE,
    FALSE,
    NULL,
    FALSE
  ),
  (
    'cba74237-0801-4e3b-93f6-012aeab6eb91',
    'Admin',
    'admin@mail.com',
    FALSE,
    FALSE,
    NULL,
    TRUE
  ),
  (
    'e50d5d0a-4fdb-4de3-b431-119e684d775e',
    'Moderator',
    'moderator@mail.com',
    FALSE,
    FALSE,
    NULL,
    FALSE
  ),
  (
    'f193af4d-ca5e-4847-90ef-38f969792dd5',
    'Translator3',
    'translator3@mail.com',
    FALSE,
    FALSE,
    NULL,
    FALSE
  );

DELETE FROM
  PUBLIC .languages;

INSERT INTO
  PUBLIC .languages (eng, code, orig_name, is_gl)
VALUES
  ('english', 'en', 'english', TRUE),
  ('russian', 'ru', 'русский', TRUE),
  ('kazakh', 'kk', 'казахский', FALSE);

DELETE FROM
  PUBLIC .methods;

INSERT INTO
  PUBLIC .methods (title, resources, steps, "type")
VALUES
  ('Vcana Bible', '{"literal":true, "simplified":false, "tn":false}', '[
  {
    "title": "Шаг один. Читаем вместе",
    "description": "Some text here...",
    "time": 60,
    "count_of_users": 4,
    "intro": "# Intro\n\n### How To Start\n\nSome text here\n\nhttps://youtu.be/sDcfb_f-f",
    "config": [
      {
        "size": 4,
        "tools": [
          {
            "name": "literal",
            "config": {}
          }
        ]
      },
      {
        "size": 2,
        "tools": [
          {
            "name": "notepad",
            "config": {"team": true}
          },
          {
            "name": "notepad",
            "config": {}
          }
        ]
      }
    ]
  },
  {
    "title": "Шаг два. Набросок",
    "description": "Some text here2...",
    "time": 30,
    "count_of_users": 2,
    "intro": "# Intro\n\n### Как сделать набросок\n\nSome text here\n\nhttps://youtu.be/sDcfb_f-f",
    "config": [
      {
        "size": 3,
        "tools": [
          {
            "name": "literal",
            "config": {}
          },
          {
            "name": "simplified",
            "config": {}
          },
          {
            "name": "tn",
            "config": {}
          }
        ]
      },
      {
        "size": 3,
        "tools": [
          {
            "name": "editor",
            "config": {"type":"blind"}
          },
          {
            "name": "dictionary",
            "config": {}
          }
        ]
      }
    ]
  }]', 'bible'::project_type),
  ('Vcana OBS', '{"obs":true, "tw":false, "tq":false}', '[
  {
    "title": "Шаг один. Читаем вместе OBS",
    "description": "Some text here...",
    "time": 45,
    "count_of_users": 4,
    "intro": "# Intro\n\n### How To Start\n\nSome text here\n\nhttps://youtu.be/sDcfb_f-f",
    "config": [
      {
        "size": 4,
        "tools": [
          {
            "name": "obs",
            "config": {}
          },
          {
            "name": "tw",
            "config": {}
          },
          {
            "name": "tq",
            "config": {}
          }
        ]
      },
      {
        "size": 2,
        "tools": [
          {
            "name": "notepad",
            "config": {}
          }
        ]
      }
    ]
  },
  {
    "title": "Шаг два. Набросок OBS",
    "description": "Some text here2...",
    "time": 30,
    "count_of_users": 2,
    "intro": "# Intro\n\n### Как сделать набросок\n\nSome text here\n\nhttps://youtu.be/sDcfb_f-f",
    "config": [
      {
        "size": 3,
        "tools": [
          {
            "name": "obs",
            "config": {}
          }
        ]
      },
      {
        "size": 3,
        "tools": [
          {
            "name": "editor",
            "config": {"type":"blind"}
          },
          {
            "name": "dictionary",
            "config": {}
          }
        ]
      }
    ]
  }]', 'obs'::project_type);

DELETE FROM
  PUBLIC .role_permissions;

INSERT INTO
  PUBLIC .role_permissions (role, permission)
VALUES
  ('moderator', 'dictionaries'),
  ('moderator', 'notes'),
  ('moderator', 'translator.set'),
  ('coordinator', 'dictionaries'),
  ('coordinator', 'notes'),
  ('coordinator', 'verses.set'),
  ('coordinator', 'moderator.set'),
  ('coordinator', 'user_projects'),
  ('coordinator', 'translator.set');

DELETE FROM
  PUBLIC .projects;

INSERT INTO
  PUBLIC .projects (title, code, language_id, method, "type", resources, base_manifest)
VALUES
  (
    'Russian Literal Open Bible',
    'ru_rlob',
    2,
    'Vcana Bible',
    'bible'::project_type,
    '{
      "literal": {
        "owner": "unfoldingword",
        "repo": "en_ult",
        "commit": "acf32a196",
        "manifest": "{}"
      },
      "simplified": {
        "owner": "unfoldingword",
        "repo": "en_ust",
        "commit": "acf32a196",
        "manifest": "{}"
      },
      "tn": {
        "owner": "unfoldingword",
        "repo": "en_tn",
        "commit": "acf32a196",
        "manifest": "{}"
      }
    }',
    '{
      "resource": "literal",
      "books": [
        {
          "name": "gen",
          "link": "unfoldingword/en_ult/a3c1876/01_GEN.usfm"
        },
        {
          "name": "1ti",
          "link": "unfoldingword/en_ult/a3c1876/55_1TI.usfm"
        },
        {
          "name": "tit",
          "link": "unfoldingword/en_ult/a3c1876/57_TIT.usfm"
        }
      ]
    }'
  ),
  (
    'Kazakh Open Bible Story',
    'kk_obs',
    3,
    'Vcana OBS',
    'obs'::project_type,
    '{
      "obs": {
        "owner": "ru_gl",
        "repo": "ru_obs",
        "commit": "acf32a196",
        "manifest": "{}"
      },
      "tw": {
        "owner": "ru_gl",
        "repo": "ru_obs-twl",
        "commit": "acf32a196",
        "manifest": "{}"
      },
      "tq": {
        "owner": "ru_gl",
        "repo": "ru_obs-tq",
        "commit": "acf32a196",
        "manifest": "{}"
      }
    }',
    '{
      "resource": "obs",
      "books": [
        {
          "name": "obs",
          "link": "ru_gl/ru_obs/a3c1876/content"
        }
      ]
    }'
  );

DELETE FROM
  PUBLIC .project_translators;

INSERT INTO
  PUBLIC .project_translators (project_id, user_id, is_moderator)
VALUES
  (1, '21ae6e79-3f1d-4b87-bcb1-90256f63c167', FALSE),
  (1, 'bba5a95e-33b7-431d-8c43-aedc517a1aa6', FALSE),
  (1, 'f193af4d-ca5e-4847-90ef-38f969792dd5', FALSE),
  (1, '2e108465-9c20-46cd-9e43-933730229762', TRUE),
  (2, '21ae6e79-3f1d-4b87-bcb1-90256f63c167', FALSE),
  (2, 'bba5a95e-33b7-431d-8c43-aedc517a1aa6', FALSE),
  (2, 'f193af4d-ca5e-4847-90ef-38f969792dd5', FALSE),
  (2, '8331e952-5771-49a6-a679-c44736f5581b', TRUE);

DELETE FROM
  PUBLIC .project_coordinators;

INSERT INTO
  PUBLIC .project_coordinators (project_id, user_id)
VALUES
  (1, '2b95a8e9-2ee1-41ef-84ec-2403dd87c9f2'),
  (2, '54358d8e-0144-47fc-a290-a6882023a3d6');

DELETE FROM
  PUBLIC .steps;

INSERT INTO
  PUBLIC .steps (title, "description", "time", count_of_users, intro, project_id, config, order_by )
VALUES
  ('Шаг один. Читаем вместе Библию', 'Тут можно перевести текст...', 60, 4,
    '# Вводная\n\n### Как начать\n\nСсылка на видео, должна парситься\n\nhttps://youtu.be/sDcfb_f-f',
    1,
    '[
      {
        "size": 4,
        "tools": [
          {
            "name": "literal",
            "config": {}
          }
        ]
      },
      {
        "size": 2,
        "tools": [
          {
            "name": "notepad",
            "config": {"team": true}
          },
          {
            "name": "notepad",
            "config": {}
          }
        ]
      }
    ]', 1),
  ('Шаг два. Набросок', 'Some text here2...', 30, 2,
    '# Intro\n\n### Как сделать набросок\n\nSome text here\n\nhttps://youtu.be/sDcfb_f-f',
    1,
    '[
      {
        "size": 3,
        "tools": [
          {
            "name": "literal",
            "config": {}
          },
          {
            "name": "simplified",
            "config": {}
          },
          {
            "name": "tn",
            "config": {}
          }
        ]
      },
      {
        "size": 3,
        "tools": [
          {
            "name": "editor",
            "config": {"type":"blind"}
          },
          {
            "name": "dictionary",
            "config": {}
          }
        ]
      }
    ]',2),
  ('Шаг один. Читаем вместе OBS', 'Some text here...', 45, 4,
    '# Intro\n\n### How To Start\n\nSome text here\n\nhttps://youtu.be/sDcfb_f-f',
    2,
    '[
      {
        "size": 4,
        "tools": [
          {
            "name": "obs",
            "config": {}
          },
          {
            "name": "tw",
            "config": {}
          },
          {
            "name": "tq",
            "config": {}
          }
        ]
      },
      {
        "size": 2,
        "tools": [
          {
            "name": "notepad",
            "config": {}
          }
        ]
      }
    ]', 1),
  ('Шаг два. Набросок OBS', 'Some text here2...', 30, 2,
    '# Intro\n\n### Как сделать набросок\n\nSome text here\n\nhttps://youtu.be/sDcfb_f-f',
    2,
    '[
      {
        "size": 3,
        "tools": [
          {
            "name": "obs",
            "config": {}
          }
        ]
      },
      {
        "size": 3,
        "tools": [
          {
            "name": "editor",
            "config": {"type":"blind"}
          },
          {
            "name": "dictionary",
            "config": {}
          }
        ]
      }
    ]',2);

DELETE FROM
  PUBLIC .books;

INSERT INTO
  PUBLIC .books (code, project_id, chapters)
VALUES
  ('tit', 1, '{ "1": 3, "2": 4, "3": 2 }'),
  ('1ti', 1, '{ "1": 4, "2": 2, "3": 16, "4": 16, "5": 25, "6": 21 }'),
  ('obs', 2, '{ "1": 3, "2": 17, "3": 23, "4": 19, "5": 14, "6": 16, "7": 21, "8": 16, "9": 11, "10": 15 }');

DELETE FROM
  PUBLIC .chapters;

INSERT INTO
  PUBLIC .chapters (num, book_id, verses, "text")
VALUES
  (1, 1, 3, '1. Тут будет у нас сохраняться итоговый текст\n2. Не знаю пока в каком формате\n3. USFM нужен в итоге, но может тут MD или JSON'),
  (2, 1, 4, '1. А тут\n2. У нас\n3. Итоговая вторая\n4. Глава'),
  (3, 1, 2, null),
  (1, 2, 4, '1. Тут итог\n2. другой\n3. Книги\n4. 4 стиха'),
  (2, 2, 2, null),
  (1, 3, 3, null);

DELETE FROM
  PUBLIC .verses;

INSERT INTO
  PUBLIC .verses (num, "text", chapter_id, project_translator_id, current_step)
VALUES
  (1, 'Тут будет у нас сохраняться итоговый текст', 1, 3, 2),
  (2, 'Не знаю пока в каком формате', 1, 1, 2),
  (3, 'USFM нужен в итоге, но может тут MD или JSON', 1, 2, 2),
  (1, 'А тут', 2, 3, 2),
  (2, 'У нас', 2, 1, 2),
  (3, 'Итоговая вторая', 2, 2, 2),
  (4, 'Глава', 2, 4, 2),
  (1, null, 3, 3, 1),
  (2, null, 3, 1, 1),
  (1, 'Тут итог', 4, 3, 2),
  (2, 'другой', 4, 1, 2),
  (3, 'Книги', 4, 2, 2),
  (4, '4 стиха', 4, 4, 2),
  (1, null, 5, 3, 1),
  (2, null, 5, 1, 1),
  (1, 'Здесь начался перевод', 6, 2, 4),
  (2, 'Какой-то главы', 6, 8, 3),
  (3, null, 6, 8, 3);

DELETE FROM
  PUBLIC .progress;

INSERT INTO
  PUBLIC .progress (verse_id, step_id, "text")
VALUES
  (1, 1, 'Тут будет у нас сохраняться итоговый текст'),
  (2, 1, 'Не знаю пока в каком формате'),
  (3, 1, 'USFM нужен в итоге, но может тут MD или JSON'),
  (4, 1, 'А тут'),
  (5, 1, 'У нас'),
  (6, 1, 'Итоговая вторая'),
  (7, 1, 'Глава'),
  (10, 1, 'Тут итог'),
  (11, 1, 'другой'),
  (12, 1, 'Книги'),
  (13, 1, '4 стиха'),
  (16, 3, 'Здесь начался перевод');
